How java works?
---------------

Suppose we have a file Test.java 

then we need to compile this java file as 

javac Test.java  (javac is a compiler application)

If our java file doesnt have any errors then class file will be generated as Test.class 

This class file is made up of bytecode, this bytecode is platform independent

we can run this class file with the help of JVM (Java Virtual Machine)

JVM translates the bytecode into something the underlying platform understands, and runs our program 

we can simply run our java file as 

java Test

after that JVM starts looking for the main method of our class 

after that JVM runs everything which is present in that main method

every java application must have one class and one main method (that means not one main per class, just one main per application)

Lets take a example 

public class Test {
	
	public static void main (String [] args){
		
		System.out.println("Test Class");
	}
}

Identifier
----------

A name in java program is called identifier, it can be method name, variable name, class name or label name 

class Test {
	
	public static void main (String [] args){
		
		int x = 10;
	}
}

how many identifiers are present above

Ans: 5 ----> Test, main, String, args, x

Following are the allowed characters and symbols which are allowed to use for identifiers

a - z, A - Z, 0 - 9, $, _

for eg.

total_work --- allowed

total_work# --- not allowed

Rules:

1. Identifiers cannot start from digits 

for eg.

total123 --- allowed

123total --- not allowed

2. Java is a case sensitive programming language

for eg.

class Test {
	
	int number = 10;
	
	int Number = 20;
	
	int NUMBER = 30;
}

all three are considered as different identifiers

3. there is no limit for the length of java identifiers

4. we cant use reserved keywords as identifiers 

for eg.

int x = 10; --- valid 

int if = 10; --- not valid

5. All the predefined java class names and interface names we can use as identifiers, but its not a good programming practice

for eg.

int String = 10; --- valid 

6. Here is a list of keywords in the Java programming language. You cannot use any of the following as identifiers in your programs. The keywords const and goto are reserved, even though they are not currently used. true, false, and null might seem like keywords, but theyare actually literals; you cannot use them as identifiers in your programs.

abstract, continue,	for, new, switch, assert***, default, goto*, package, synchronized,
boolean, do, if, private, this, break, double, implements, protected, throw, byte, else, import, public, throws,
case, enum****,	instanceof,	return,	transient, catch, extends, int,	short, try, char, final, interface,	static,	void,
class, finally,	long, strictfp**, volatile, const*,	float, native, super, while

*	 	not used
**	 	added in 1.2
***	 	added in 1.4
****	added in 5.0


Datatypes
---------

Java is a strongly typed programming language - type checking is very important

Rules:

1. Each and every datatype is clearly defined

2. Every assignment should be checked by compiler for type compatibility

for eg.

int x = 10.5 --- not valid 

boolean b = 0 --- not valid

Java is not considered as pure object oriented language, because several OOPS features are not satisfied by JAVA (like operator overloading and multiple inheritance, etc)

Moreover we are depending on primitive datatypes which are non objects.

there are eight primitive data types which are supported by JAVA 

byte, short, int, long, float, double, boolean, char

Except boolean and char remaining data types are considered as signed data types because we can represent both +ve and -ve numbers

byte is the best choice if we want to handle data in terms of streams either from the file or from the network

short is best choice for 16 bit processors like 8085 / 8086 but nowadays they are outdated 

11-04-2024

when to use float and double 

if we want 5 to 6 places of accuracy after the decimal then we should go for float 

if we want 15 to 16 places of accuracy after the decimal then we should go for double 

class TestString {
	
	public static void main (String [] args){
		
		String [] s1 = {"a", "b", "c"};
		
		String [] s2 = {"d", "e", "f"};
		
		String [] s3 = {"g", "h", "i"};
		
		int s1Len = s1.length;
		
		int s2Len = s2.length;
		
		int s3Len = s3.length;
		
		int random1 = (int) (Math.random() * s1Len);
		
		int random2 = (int) (Math.random() * s2Len);
		
		int random3 = (int) (Math.random() * s3Len);
		
		String randomChars = s1[random1] + " " + s2[random2] + " " + s3[random3];
		
		System.out.p[rintln("Random characters are " + randomChars);
	}
}         




